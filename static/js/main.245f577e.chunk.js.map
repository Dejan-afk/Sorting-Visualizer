{"version":3,"sources":["mergeSort.js","quickSort.js","heapSort.js","algorithm_visual.js","App.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","helpArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getQuickSortAnimations","quickSortHelper","start","end","pivotIndex","pivotValue","index","indexOne","indexTwo","temp","swap","partition","getHeapSortAnimations","size","max_heapify","heapSortHelper","left","right","max","AlgorithmSorting","props","handleSliderBars","value","slider","document","getElementById","setState","bars","setTimeout","resetArray","handleSliderSpeed","console","log","speed","changeTheme","switcher","state","backgroundColor","style","marginLeft","changeColor","primary_Color","getRandomColor","secondary_Color","this","randomIntFromInterval","isSorted","disableButtons","disableTime","getDisableTime","arrayBars","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","newHeight","height","enableButtons","barOneIndex","barTwoIndex","javaScriptSortedArray","sort","a","b","heapSortedArray","arraysAreEqual","className","map","idx","width","id","onClick","type","min","onChange","mergeSort","quickSort","heapSort","step","React","Component","random","arrayOne","arrayTwo","disabled","animationLength","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.245f577e.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if(array.length <= 1) return array;\r\n    const helpArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, helpArray, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(mainArray, startIdx, endIdx, helpArray, animations){\r\n    if(startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(helpArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(helpArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, helpArray, animations);\r\n}\r\n\r\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, helpArray, animations){\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while(i <= middleIdx && j <= endIdx){\r\n        //These are the values that we're comparing; we push them once to change their color\r\n        animations.push([i, j]);\r\n        //These are the values that we're comparing; we push them a second time to revert their color\r\n        animations.push([i, j]);\r\n        if(helpArray[i] <= helpArray[j]){\r\n            //We overwrite the value at index k in the original array with the value at index j in the helpArray.\r\n            animations.push([k, helpArray[i]]);\r\n            mainArray[k++] = helpArray[i++];\r\n        }else{\r\n            animations.push([k, helpArray[j]]);\r\n            mainArray[k++] = helpArray[j++];\r\n        }\r\n    }\r\n    while(i <= middleIdx){\r\n        //Same as above with different indexes\r\n        animations.push([i, i]);\r\n        animations.push([i, i]);\r\n        animations.push([k, helpArray[i]]);\r\n        mainArray[k++] = helpArray[i++];\r\n    }\r\n\r\n    while(j <= endIdx){\r\n        //Same as above with different indexes\r\n        animations.push([j, j]);\r\n        animations.push([j, j]);\r\n        animations.push([k, helpArray[j]]);\r\n        mainArray[k++] = helpArray[j++];\r\n    }\r\n}","export function getQuickSortAnimations(array){\r\n    const animations = [];\r\n    if(array.length <= 1) return array;\r\n    quickSortHelper(array, 0, array.length-1, animations);\r\n    return animations;\r\n}\r\n\r\nfunction quickSortHelper(mainArray, start, end, animations){\r\n    \r\n    if(start<end){\r\n        const pivotIndex = partition(mainArray, start, end,  animations);\r\n        quickSortHelper(mainArray, start, pivotIndex-1,  animations);\r\n        quickSortHelper(mainArray, pivotIndex+1, end, animations);\r\n    }\r\n}\r\n\r\nfunction partition(mainArray, start, end, animations){\r\n    \r\n    const pivotValue = mainArray[end];\r\n    let index = start;\r\n    for(let i = start; i < end; i++){\r\n        //Two values we are comparing.\r\n        animations.push([i,end]);\r\n        animations.push([i, end]);\r\n        if(mainArray[i] < pivotValue){\r\n            //swapping elements\r\n            animations.push([index, i]);\r\n            [mainArray[i], mainArray[index]] = [mainArray[index], mainArray[i]];\r\n            //Moving to next element\r\n            index++;\r\n        }\r\n        else{\r\n            animations.push([0,0])\r\n        }\r\n        animations.push([0,0]);\r\n    }\r\n\r\n    //Putting the pivot value in the middle\r\n    animations.push([0,0], [0,0], [index,end], [0,0])\r\n    swap(mainArray, index, end)\r\n    return index;\r\n    \r\n}\r\n\r\nfunction swap(array, indexOne, indexTwo){\r\n    let temp = array[indexOne];\r\n    array[indexOne] = array[indexTwo];\r\n    array[indexTwo] = temp;\r\n}"," export function getHeapSortAnimations(array) {\r\n    const animations = [];\r\n    if(array.length <= 1) return array;\r\n    heapSortHelper(array, animations);\r\n    return animations;\r\n}\r\n\r\nfunction heapSortHelper(array, animations){\r\n    let size = array.length;\r\n    for(let i = Math.floor(size / 2)-1; i >= 0; i--){\r\n        max_heapify(array, size, i, animations);\r\n    }\r\n    for(let i = array.length - 1; i > 0; i--){\r\n        animations.push([true,0,i]);\r\n        swap(array, 0, i);\r\n        size--;\r\n        max_heapify(array, size, 0, animations);\r\n    }\r\n}\r\n\r\nfunction max_heapify(array,size, index, animations){\r\n    const left = 2 * index + 1;\r\n    const right = left + 1;\r\n    let max = index;\r\n\r\n    if(left < size && array[left] > array[max]){\r\n        //comparing elements\r\n        animations.push([0,left, max]);\r\n        animations.push([1,left, max]);\r\n        max = left;\r\n    }\r\n    if(right < size && array[right] > array[max]){\r\n        //comparing elements\r\n        animations.push([0, right, max]);\r\n        animations.push([1, right, max]);\r\n        max = right;\r\n    }\r\n    if(max !== index){\r\n        //swapping elements\r\n        animations.push([true, index, max]);\r\n        swap(array, index, max);\r\n        max_heapify(array, size, max, animations);\r\n    }\r\n    return array;\r\n}\r\n\r\nfunction swap(array, indexOne, indexTwo){\r\n    const temp = array[indexOne];\r\n    array[indexOne] = array[indexTwo];\r\n    array[indexTwo] = temp;\r\n}\r\n","import React from 'react';\r\nimport {getMergeSortAnimations} from './mergeSort'\r\nimport {getQuickSortAnimations} from './quickSort'\r\nimport {getHeapSortAnimations} from './heapSort'\r\nimport './algorithm-visual.css'\r\n\r\n\r\nexport default class AlgorithmSorting extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n            speed: 5,\r\n            bars: 100,\r\n            backgroundColor: 'white',\r\n            primary_Color: 'turquoise',\r\n            secondary_Color: 'red',\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = []\r\n        for(let i = 0; i < this.state.bars; i++){\r\n            array.push(randomIntFromInterval(5,550));\r\n        }\r\n        this.setState({array});\r\n    }\r\n\r\n    \r\n    \r\n\r\n    mergeSort(){\r\n        if(isSorted(this.state.array)) return;\r\n        disableButtons();\r\n        const animations = getMergeSortAnimations(this.state.array);\r\n        const disableTime = getDisableTime(this.state.speed, animations.length);\r\n        for(let i = 0; i < animations.length; i++){\r\n            const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n            const isColorChange = i % 3 !== 2;\r\n            if(isColorChange){\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? this.state.secondary_Color : this.state.primary_Color;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * this.state.speed);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * this.state.speed);\r\n            }\r\n        }\r\n        enableButtons(disableTime);\r\n        \r\n    }\r\n    \r\n\r\n    quickSort(){\r\n        if(isSorted(this.state.array)) return;\r\n        disableButtons();\r\n        const animations = getQuickSortAnimations(this.state.array);\r\n        const disableTime = getDisableTime(this.state.speed, animations.length);\r\n        for(let i = 0; i < animations.length; i++){\r\n            const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n            const isColorChange = i % 4 !== 2 && i % 4 !== 3;\r\n            if(isColorChange){\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 4 === 0 ? this.state.secondary_Color : this.state.primary_Color;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * this.state.speed);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIndex, barTwoIndex] = animations[i];\r\n                    const temp = arrayBars[barOneIndex].style.height;\r\n                    arrayBars[barOneIndex].style.height = arrayBars[barTwoIndex].style.height;\r\n                    arrayBars[barTwoIndex].style.height = temp\r\n                }, i * this.state.speed);\r\n            }\r\n        }\r\n        enableButtons(disableTime);\r\n    }\r\n\r\n    heapSort() {\r\n        if(isSorted(this.state.array)) return;\r\n        disableButtons();\r\n        const animations = getHeapSortAnimations(this.state.array);\r\n        const disableTime = getDisableTime(this.state.speed, animations.length);\r\n        for(let i = 0; i < animations.length; i++){\r\n            const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n            const isColorChange = animations[i][0] !== true;\r\n            if(isColorChange){\r\n                const [barOneIdx, barTwoIdx] = [animations[i][1], animations[i][2]];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = animations[i][0] === 0 ? this.state.secondary_Color : this.state.primary_Color;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * this.state.speed);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIndex, barTwoIndex] = [animations[i][1], animations[i][2]];\r\n                    const temp = arrayBars[barOneIndex].style.height;\r\n                    arrayBars[barOneIndex].style.height = arrayBars[barTwoIndex].style.height;\r\n                    arrayBars[barTwoIndex].style.height = temp\r\n                }, i * this.state.speed);\r\n            }\r\n        }\r\n        enableButtons(disableTime);\r\n    }\r\n\r\n    \r\n\r\n    //NOTE: funktioniert nur, wenn Algorithmus array returned.\r\n    //Wenn die Animations zurückgegeben wird (wie aktuell) wird diese Methode nicht funktionieren\r\n    testSortingAlgorithms(){\r\n        for(let i = 0; i < 100; i++){\r\n            const array = [];\r\n            const length = randomIntFromInterval(1,500);\r\n            for (let i = 0; i < length; i++){\r\n                array.push(randomIntFromInterval(-1000, 1000));\r\n            }\r\n            const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n            const heapSortedArray = getHeapSortAnimations(array.slice());\r\n            console.log(arraysAreEqual(javaScriptSortedArray, heapSortedArray));\r\n        }\r\n    }\r\n\r\n    /* handle slidechanges */\r\n    handleSliderBars = (value) => {\r\n        var slider = document.getElementById('bars');\r\n        this.setState({bars: slider.value});\r\n        setTimeout(() => {\r\n            this.resetArray();\r\n        }, 400)\r\n    }\r\n\r\n    handleSliderSpeed = (value) => {\r\n        var slider = document.getElementById('speed');\r\n       \r\n                \r\n        console.log(slider.value)\r\n        this.setState({speed: slider.value});\r\n\r\n    }\r\n    changeTheme = () => {\r\n        const switcher = document.getElementById(\"switcher\");\r\n        if(this.state.backgroundColor === 'white'){\r\n            this.setState({backgroundColor: 'black'});\r\n            switcher.style.backgroundColor = 'white';\r\n            switcher.style.marginLeft = '20px';\r\n        }else{\r\n            this.setState({backgroundColor: 'white'});\r\n            switcher.style.backgroundColor = 'black';\r\n            switcher.style.marginLeft = '0';\r\n        }\r\n    }\r\n\r\n    changeColor = () => {\r\n        const primary_Color = getRandomColor();\r\n        const secondary_Color = getRandomColor();\r\n\r\n        this.setState({\r\n            primary_Color: primary_Color,\r\n            secondary_Color: secondary_Color\r\n        })\r\n    }\r\n\r\n\r\n    render(){\r\n        const {array} = this.state;\r\n\r\n        return(\r\n            <div className=\"array-container\">\r\n                <div className=\"wrapper\">\r\n                    <div className=\"bar-container\" style={{backgroundColor: this.state.backgroundColor}}>\r\n                        {array.map((value, idx) => (\r\n                            <div\r\n                            className=\"array-bar\"\r\n                            key={idx}\r\n                            style={{\r\n                                backgroundColor: this.state.primary_Color,\r\n                                height: `${value}px`,\r\n                                width: `${1024/this.state.bars - 2}px`\r\n                            }}></div>\r\n                        ))}\r\n                    </div>\r\n                    <div className=\"info-container\">\r\n                        <div className=\"colorTheme\">\r\n                            <p>ChangeTheme</p>\r\n                            <div className=\"themeSwitcher\">\r\n                                <button id=\"switcher\" onClick={() => this.changeTheme()} className=\"switcher\"></button>\r\n                            </div>\r\n                        </div>\r\n                            <div className=\"colorScheme\">\r\n                                <button id=\"color\" onClick={() => this.changeColor()}>Random Colorchanger</button>\r\n                            </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"button-container\">\r\n                    <div className=\"scaleOne\">\r\n                        <input className=\"rangeSlider\" type=\"range\" min=\"1\" max=\"10\" id=\"speed\" value={this.state.speed} onChange={() => this.handleSliderSpeed()}/>\r\n                        <h3 className=\"text\">Speed</h3>\r\n                    </div>\r\n                    <div className=\"buttons\">\r\n                        <button id=\"reset\" onClick={() => this.resetArray()}>Generate New Array</button>\r\n                        <button id=\"merge\" onClick={() => this.mergeSort()}>Merge Sort</button>\r\n                        <button id=\"quick\" onClick={() => this.quickSort()}>Quick Sort</button>\r\n                        <button id=\"heap\" onClick={() => this.heapSort()}>Heap Sort</button>\r\n                        {/* <button onClick={() => this.testSortingAlgorithms()}>Test Sorting Algorithm </button>  */}\r\n                    </div>\r\n                    <div className=\"scaleTwo\">\r\n                        <input className=\"rangeSlider\" type=\"range\" min=\"5\" max=\"255\" step=\"5\" value={this.state.bars} id=\"bars\" onChange={() => this.handleSliderBars()}/>\r\n                        <h3 className=\"text\">Bars</h3>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max){\r\n    return Math.floor(Math.random()*(max-min + 1) + min);\r\n}\r\n\r\nfunction arraysAreEqual(arrayOne, arrayTwo){\r\n    if(arrayOne.length !== arrayTwo.length) return false;\r\n    for(let i = 0; i < arrayOne.length; i++){\r\n        if(arrayOne[i] !== arrayTwo[i]) return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction disableButtons(){\r\n    document.getElementById('speed').disabled = true;\r\n    document.getElementById('bars').disabled = true;\r\n    document.getElementById('switcher').disabled = true;\r\n    document.getElementById('color').disabled = true;\r\n    document.getElementById('reset').disabled = true;\r\n    document.getElementById('merge').disabled = true;\r\n    document.getElementById('quick').disabled = true;\r\n    document.getElementById('heap').disabled = true;\r\n}\r\n\r\nfunction enableButtons(disableTime){\r\n    setTimeout(() => {\r\n        document.getElementById('speed').disabled = false;\r\n        document.getElementById('bars').disabled = false;\r\n        document.getElementById('switcher').disabled = false;\r\n        document.getElementById('color').disabled = false;\r\n        document.getElementById('reset').disabled = false;\r\n        document.getElementById('merge').disabled = false;\r\n        document.getElementById('quick').disabled = false;\r\n        document.getElementById('heap').disabled = false;\r\n    },disableTime)\r\n}\r\n\r\nfunction getDisableTime(speed, animationLength){\r\n    const disableTime = speed * animationLength + 1000;\r\n    // for(let i = 0; i < animationLength; i++){\r\n    //     disableTime += i * speed;\r\n    // }\r\n    return disableTime;\r\n}\r\n\r\nfunction getRandomColor(){\r\n    let letters = '0123456789ABCDEF';\r\n    let color = '#';\r\n    for(let i = 0; i < 6; i++){\r\n        color += letters[Math.floor(Math.random()*16)];\r\n    }\r\n    return color;\r\n}\r\n\r\n\r\nfunction isSorted(array){\r\n    for(let i = 0; i < array.length-1; i++){\r\n        if(array[i] > array[i+1]){\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","import AlgorithmVisual from './algorithm_visual'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div>\n      <AlgorithmVisual />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}